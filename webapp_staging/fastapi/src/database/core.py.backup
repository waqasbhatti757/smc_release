# from typing import Annotated
# from fastapi import Depends
# from sqlalchemy import create_engine
# from sqlalchemy.orm import sessionmaker, Session, declarative_base
# import os
# from dotenv import load_dotenv
#
# load_dotenv()
#
# """ You can add a DATABASE_URL environment variable to your .env file """
# DATABASE_URL = os.getenv("DATABASE_URL")
#
# """ Or hard code SQLite here """
# # DATABASE_URL = "sqlite:///./todosapp.db"
#
# """ Or hard code PostgreSQL here """
# # DATABASE_URL="postgresql://postgres:postgres@db:5432/cleanfastapi"
#
# engine = create_engine(DATABASE_URL)
#
# SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)
#
# Base = declarative_base()
#
# def get_db():
#     db = SessionLocal()
#     try:
#         yield db
#     finally:
#         db.close()
#
# DbSession = Annotated[Session, Depends(get_db)]
#
#

from typing import AsyncGenerator
from typing_extensions import Annotated
from sqlalchemy.ext.asyncio import AsyncSession, create_async_engine, async_sessionmaker
from sqlalchemy.orm import declarative_base
from fastapi import Depends
import os
from dotenv import load_dotenv
# from src.database.core import AsyncSessionLocal  # ✅ Correct import

load_dotenv()

DATABASE_URL = os.getenv("DATABASE_URL")

# ✅ Update the DB URL to asyncpg format
# Example: "postgresql+asyncpg://user:pass@host:port/db"
DATABASE_URL = DATABASE_URL.replace("postgresql://", "postgresql+asyncpg://")

# ✅ Create async engine
engine = create_async_engine(DATABASE_URL, echo=True, pool_size=100, max_overflow = 200)

# ✅ Create async session factory
AsyncSessionLocal = async_sessionmaker(bind=engine, expire_on_commit=False)

# ✅ Declarative base
Base = declarative_base()

# ✅ Dependency to get DB session
async def get_db() -> AsyncGenerator[AsyncSession, None]:
    async with AsyncSessionLocal() as session:
        yield session

# ✅ Alias for FastAPI DI
DbSession = Annotated[AsyncSession, Depends(get_db)]
